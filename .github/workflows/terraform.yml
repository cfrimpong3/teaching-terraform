name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  pull-requests: write
  id-token: write
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      aws-region: ${{ secrets.AWS_REGION }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        role-to-assume: arn:aws:iam::425346061898:role/Git-Actions-Role
        role-session-name: samplerolesession
        aws-region: ${{ secrets.AWS_REGION }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
  #   with:
    #    terraform_version: 1.2.5
   

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc
    - name: Terraform Init
      id: init
      env:
        AWS_BUCKET_NAME: terra-bucket-1
        AWS_BUCKET_KEY_NAME: terra-bucket-1.tfstate
      run: terraform init -backend-config="bucket=terra-bucket-1" -backend-config="key=terra-bucket-1.tfstate" -backend-config="region=us-east-1"

    # Checks that all Terraform configuration files adhere to a canonical format
   # - name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'Merge pull request'
      run: terraform apply -auto-approve -input=false
